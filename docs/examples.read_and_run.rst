.. _read_and_run:----------Read & Run----------How to Read a file and Run a simulation.. note::    This is an example how to load an EPANET Input file into OOPNET and how to perform a simulation and get information from the ReportAt first we have to import the Python `os <https://docs.python.org/2/library/os.html>`_ package [#]_ and theOOPNET's API [#]_... literalinclude:: /../examples/read_and_run.py    :language: python    :lines: 1-3Then we have to specify the filename of the EPANET input file and the path to the file we want to simulate. Imaginewe have a directory ``data`` and a EPANET Input file called ``Poulakis.inp``. This is done in the following way:.. literalinclude:: /../examples/read_and_run.py    :language: python    :lines: 5To load the EPANET model into OOPNET, you simply have to call OOPNET's ``Read`` function.. literalinclude:: /../examples/read_and_run.py    :language: python    :lines: 7This generates a OOPNET Network-object which is saved in this case to the variable ``network``.Now we can access all the information which was contained in the EPANET input file and also change it. For example, we can iterate over all junctions in the network and print the junction IDs, demands and elevations. To get a list of all junctions in the network, we use the ``get_junctions()`` function:.. literalinclude:: /../examples/read_and_run.py    :language: python    :lines: 9-10This results in following output:::    J-02 50.0 0.0    J-03 50.0 0.0    J-04 50.0 0.0    J-05 50.0 0.0    J-06 50.0 0.0    J-07 50.0 0.0    J-08 50.0 0.0    J-09 50.0 0.0    J-10 50.0 0.0    J-11 50.0 0.0    J-12 50.0 0.0    J-13 50.0 0.0    J-14 50.0 0.0    J-15 50.0 0.0    J-16 50.0 0.0    J-17 50.0 0.0    J-18 50.0 0.0    J-19 50.0 0.0    J-20 50.0 0.0    J-21 50.0 0.0    J-22 50.0 0.0    J-23 50.0 0.0    J-24 50.0 0.0    J-25 50.0 0.0    J-26 50.0 0.0    J-27 50.0 0.0    J-28 50.0 0.0    J-29 50.0 0.0    J-30 50.0 0.0    J-31 50.0 0.0As we can see, every node has the same demand of 50.0 (l/s) in `Poulakis` network and the same elevation of 0.0 (m).Running a simulation is done by OOPNET's `Run`-function. This generates an OOPNET `Report` that is saved to the variable ``report`` in our case through.. literalinclude:: /../examples/read_and_run.py    :language: python    :lines: 12The `Report` consists of two xray DataArrays (one for the nodes and one for the links) containing all information in the Epanet Report file:.. literalinclude:: /../examples/read_and_run.py    :language: python    :lines: 13::    (<xray.DataArray (id: 31, vars: 3)>    array([[   50.     ,    48.08   ,    48.07605],           [   50.     ,    36.26   ,    36.26329],           [   50.     ,    32.14   ,    32.13821],           [   50.     ,    25.61   ,    25.60759],           [   50.     ,    22.37   ,    22.37343],           [   50.     ,    16.97   ,    16.97458],           [   50.     ,    33.94   ,    33.94439],           [   50.     ,    33.23   ,    33.22714],           [   50.     ,    28.66   ,    28.66419],           [   50.     ,    25.37   ,    25.36879],           [   50.     ,    17.34   ,    17.34414],           [   50.     ,    14.79   ,    14.78946],           [   50.     ,    28.6    ,    28.5989 ],           [   50.     ,    26.92   ,    26.92402],           [   50.     ,    25.8    ,    25.79742],           [   50.     ,    17.04   ,    17.04486],           [   50.     ,    12.57   ,    12.5736 ],           [   50.     ,    11.3    ,    11.29814],           [   50.     ,    22.55   ,    22.54938],           [   50.     ,    22.02   ,    22.01993],           [   50.     ,    16.32   ,    16.31906],           [   50.     ,    11.87   ,    11.86996],           [   50.     ,     9.44   ,     9.44444],           [   50.     ,     8.75   ,     8.755  ],           [   50.     ,    20.3    ,    20.30294],           [   50.     ,    17.31   ,    17.31104],           [   50.     ,    13.54   ,    13.54454],           [   50.     ,    10.32   ,    10.31851],           [   50.     ,     8.48   ,     8.48094],           [   50.     ,     7.95   ,     7.95241],           [-1500.     ,    52.     ,    -0.     ]])    Coordinates:      * id       (id) object 'J-02' 'J-03' 'J-04' 'J-05' 'J-06' 'J-07' 'J-08' ...      * vars     (vars) object 'Demand' 'Head' 'Pressure', <xray.DataArray (id: 50, vars: 3)>    array([[  1.50000000e+03,   5.31000000e+00,   3.92400000e+01],           [  8.18758480e+02,   2.90000000e+00,   1.18100000e+01],           [  4.80349300e+02,   1.70000000e+00,   4.13000000e+00],           [  2.85285610e+02,   1.79000000e+00,   6.53000000e+00],           [  1.99440890e+02,   1.25000000e+00,   3.23000000e+00],           [  8.91695000e+01,   1.26000000e+00,   5.40000000e+00],           [  6.31241460e+02,   2.23000000e+00,   7.07000000e+00],           [  2.88409210e+02,   1.02000000e+00,   1.52000000e+00],           [  1.45063710e+02,   9.10000000e-01,   1.74000000e+00],           [  3.58447100e+01,   2.30000000e-01,   1.20000000e-01],           [  6.02713900e+01,   8.50000000e-01,   2.51000000e+00],           [  3.91695000e+01,   5.50000000e-01,   1.09000000e+00],           [  1.96130970e+02,   6.90000000e-01,   7.20000000e-01],           [  2.37717450e+02,   1.49000000e+00,   4.56000000e+00],           [  2.01360890e+02,   1.27000000e+00,   3.30000000e+00],           [  1.09146800e+02,   1.54000000e+00,   8.02000000e+00],           [  6.07632400e+01,   8.60000000e-01,   2.55000000e+00],           [  3.85110500e+02,   1.36000000e+00,   2.67000000e+00],           [  1.96822740e+02,   1.24000000e+00,   3.15000000e+00],           [  1.31420240e+02,   8.30000000e-01,   1.43000000e+00],           [  7.80587900e+01,   1.10000000e+00,   4.16000000e+00],           [  5.86549500e+01,   8.30000000e-01,   2.39000000e+00],           [  4.99327500e+01,   7.10000000e-01,   1.75000000e+00],           [  1.42374710e+02,   9.00000000e-01,   1.67000000e+00],           [  1.16082940e+02,   7.30000000e-01,   1.13000000e+00],           [  1.14080170e+02,   1.61000000e+00,   8.75000000e+00],           [  8.09760800e+01,   1.15000000e+00,   4.47000000e+00],           [  4.24466100e+01,   6.00000000e-01,   1.28000000e+00],           [  1.92735810e+02,   1.21000000e+00,   3.02000000e+00],           [  1.73114520e+02,   1.09000000e+00,   2.45000000e+00],           [  8.34230200e+01,   1.18000000e+00,   4.74000000e+00],           [  6.11628900e+01,   8.70000000e-01,   2.59000000e+00],           [  4.71844200e+01,   6.70000000e-01,   1.56000000e+00],           [  4.23793600e+01,   6.00000000e-01,   1.27000000e+00],           [  2.68322500e+01,   3.80000000e-01,   5.30000000e-01],           [  9.16833300e+01,   1.30000000e+00,   5.70000000e+00],           [  8.07704100e+01,   1.14000000e+00,   4.45000000e+00],           [  5.91624600e+01,   8.40000000e-01,   2.43000000e+00],           [  3.08129000e+01,   4.40000000e-01,   6.90000000e-01],           [  1.15903560e+02,   7.30000000e-01,   1.12000000e+00],           [  5.82634300e+01,   8.20000000e-01,   2.35000000e+00],           [  4.43359400e+01,   6.30000000e-01,   1.39000000e+00],           [  3.27708400e+01,   4.60000000e-01,   7.80000000e-01],           [  2.55339900e+01,   3.60000000e-01,   4.80000000e-01],           [  2.31922600e+01,   3.30000000e-01,   4.00000000e-01],           [  6.59035600e+01,   9.30000000e-01,   2.99000000e+00],           [  7.41669800e+01,   1.05000000e+00,   3.77000000e+00],           [  6.85029200e+01,   9.70000000e-01,   3.23000000e+00],           [  5.12737600e+01,   7.30000000e-01,   1.84000000e+00],           [  2.68077400e+01,   3.80000000e-01,   5.30000000e-01]])    Coordinates:      * id       (id) object 'P-01' 'P-02' 'P-03' 'P-04' 'P-05' 'P-06' 'P-07' ...      * vars     (vars) object 'Flow' 'Velocity' 'Headloss')This is the output of a steady-state simulation. If we make simulations with a duration greater than zero there will be another coordinate axis in the xray DataArray called `time`.There exist API shortcuts for getting the information you want out of a OOPNET `Report` e.g. if you want just the pressures at the nodes, you simply type.. literalinclude:: /../examples/read_and_run.py    :language: python    :lines: 15-16and you will get a Pandas DataFrame containing the pressures at the nodes::    id    J-02    48.07605    J-03    36.26329    J-04    32.13821    J-05    25.60759    J-06    22.37343    J-07    16.97458    J-08    33.94439    J-09    33.22714    J-10    28.66419    J-11    25.36879    J-12    17.34414    J-13    14.78946    J-14    28.59890    J-15    26.92402    J-16    25.79742    J-17    17.04486    J-18    12.57360    J-19    11.29814    J-20    22.54938    J-21    22.01993    J-22    16.31906    J-23    11.86996    J-24     9.44444    J-25     8.75500    J-26    20.30294    J-27    17.31104    J-28    13.54454    J-29    10.31851    J-30     8.48094    J-31     7.95241    J-01    -0.00000    dtype: float64This is handy if you want to get statistics out of your simulations, e.g. if you type.. literalinclude:: /../examples/read_and_run.py    :language: python    :lines: 17you get the mean, standard deviation, minimum, maximum and the quartiles of all the pressures in the network::    count    31.000000    mean     20.189560    std      10.322253    min      -0.000000    25%      12.221780    50%      17.344140    75%      26.360720    max      48.076050    dtype: float64+++++++Summary+++++++Here is the summary of the whole Python source code that was used in this example.. literalinclude:: /../examples/read_and_run.py    :language: python.. [#] ``os`` - Miscellaneous operating system interfaces package provides a portable way of using operating system    dependent functionality. We need this package just to specify the path where the input file is and the name of    the input file... [#] API - Application programming interface